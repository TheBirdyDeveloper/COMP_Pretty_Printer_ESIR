/**
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.comp.wh.Command;
import org.xtext.comp.wh.Commands;
import org.xtext.comp.wh.Definition;
import org.xtext.comp.wh.Input;
import org.xtext.comp.wh.Output;
import org.xtext.comp.wh.Program;
import org.xtext.comp.wh.Wh;
import org.xtext.comp.wh.impl.AffectImpl;
import org.xtext.comp.wh.impl.NopImpl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Wh> _filter = Iterables.<Wh>filter(_iterable, Wh.class);
    for (final Wh file : _filter) {
      CharSequence _prettyPrint = this.prettyPrint(file);
      fsa.generateFile("f.whpp", _prettyPrint);
    }
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String outputName) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Wh> _filter = Iterables.<Wh>filter(_iterable, Wh.class);
    for (final Wh file : _filter) {
      CharSequence _prettyPrint = this.prettyPrint(file);
      fsa.generateFile(outputName, _prettyPrint);
    }
  }
  
  public CharSequence prettyPrint(final Wh file) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Program> _elements = file.getElements();
      for(final Program prog : _elements) {
        CharSequence _prettyPrint = this.prettyPrint(prog);
        _builder.append(_prettyPrint, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence prettyPrint(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    Definition _definition = p.getDefinition();
    CharSequence _prettyPrint = this.prettyPrint(_definition);
    _builder.append(_prettyPrint, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence prettyPrint(final Definition d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("read ");
    Input _input = d.getInput();
    String _prettyPrint = this.prettyPrint(_input);
    _builder.append(_prettyPrint, "");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("    ");
    Commands _command = d.getCommand();
    String _prettyPrint_1 = this.prettyPrint(_command);
    _builder.append(_prettyPrint_1, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    Output _output = d.getOutput();
    String _prettyPrint_2 = this.prettyPrint(_output);
    _builder.append(_prettyPrint_2, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String prettyPrint(final Input i) {
    EList<String> _vars = i.getVars();
    return this.printList(_vars, ",");
  }
  
  public String prettyPrint(final Output o) {
    EList<String> _vars = o.getVars();
    return this.printList(_vars, ",");
  }
  
  public String prettyPrint(final Commands cmds) {
    String res = "";
    EList<Command> _commands = cmds.getCommands();
    int _size = _commands.size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      EList<Command> _commands_1 = cmds.getCommands();
      int _size_1 = _commands_1.size();
      int _minus = (_size_1 - 2);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for (final Integer i : _upTo) {
        String _res = res;
        EList<Command> _commands_2 = cmds.getCommands();
        Command _get = _commands_2.get((i).intValue());
        CharSequence _prettyPrint = this.prettyPrint(_get);
        String _plus = (_prettyPrint + " ;\n");
        res = (_res + _plus);
      }
    }
    String _res_1 = res;
    EList<Command> _commands_3 = cmds.getCommands();
    EList<Command> _commands_4 = cmds.getCommands();
    int _size_2 = _commands_4.size();
    int _minus_1 = (_size_2 - 1);
    Command _get_1 = _commands_3.get(_minus_1);
    CharSequence _prettyPrint_1 = this.prettyPrint(_get_1);
    res = (_res_1 + _prettyPrint_1);
    return res;
  }
  
  public CharSequence prettyPrint(final Command c) {
    EObject _cmd = c.getCmd();
    if ((_cmd instanceof NopImpl)) {
      EObject _cmd_1 = c.getCmd();
      return this.prettyPrint(((NopImpl) _cmd_1));
    }
    EObject _cmd_2 = c.getCmd();
    if ((_cmd_2 instanceof AffectImpl)) {
      EObject _cmd_3 = c.getCmd();
      return this.prettyPrint(((AffectImpl) _cmd_3));
    }
    return null;
  }
  
  public CharSequence prettyPrint(final NopImpl n) {
    StringConcatenation _builder = new StringConcatenation();
    String _nop = n.getNop();
    _builder.append(_nop, "");
    return _builder;
  }
  
  public String prettyPrint(final AffectImpl a) {
    EList<String> _vars = a.getVars();
    String res = this.printList(_vars, ",");
    String _res = res;
    res = (_res + " := ");
    String _res_1 = res;
    EList<String> _exprs = a.getExprs();
    String _printList = this.printList(_exprs, ",");
    res = (_res_1 + _printList);
    return res;
  }
  
  public String printList(final EList<String> list, final String delim) {
    String res = "";
    int _size = list.size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      int _size_1 = list.size();
      int _minus = (_size_1 - 2);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for (final Integer i : _upTo) {
        String _res = res;
        String _get = list.get((i).intValue());
        String _plus = (_get + delim);
        res = (_res + _plus);
      }
    }
    String _res_1 = res;
    int _size_2 = list.size();
    int _minus_1 = (_size_2 - 1);
    String _get_1 = list.get(_minus_1);
    res = (_res_1 + _get_1);
    return res;
  }
}
