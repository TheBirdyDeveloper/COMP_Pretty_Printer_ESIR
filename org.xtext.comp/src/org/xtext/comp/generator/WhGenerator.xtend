/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator

import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.comp.wh.Command
import org.xtext.comp.wh.Commands
import org.xtext.comp.wh.Definition
import org.xtext.comp.wh.Expr
import org.xtext.comp.wh.Input
import org.xtext.comp.wh.Output
import org.xtext.comp.wh.Program
import org.xtext.comp.wh.Wh
import org.xtext.comp.wh.impl.AffectImpl
import org.xtext.comp.wh.impl.ExprAndImpl
import org.xtext.comp.wh.impl.ExprOrImpl
import org.xtext.comp.wh.impl.ExprSimpleImpl
import org.xtext.comp.wh.impl.IfImpl
import org.xtext.comp.wh.impl.NopImpl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhGenerator extends AbstractGenerator {
	int ifIndent;
	int commandIndent;
	int whileIndent;
	int forIndent;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//N'est pas utilisée
	}
	
	def void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String outputName, int ifIndent, int commandIndent, int whileIndent, int forIndent) {
		this.ifIndent = ifIndent;
		this.commandIndent = commandIndent;
		this.whileIndent = whileIndent;
		this.forIndent = forIndent;
		for (file : resource.allContents.toIterable.filter(Wh)) {
        	fsa.generateFile(outputName, file.prettyPrint)
    	}
	}
	
	def prettyPrint(Wh file)'''
	«FOR prog : file.elements»
	«prog.prettyPrint»
	«ENDFOR»
	'''
	
	
	def prettyPrint(Program p) '''
            function «p.name»:
            «p.definition.prettyPrint»
        '''
                 
    def prettyPrint(Definition d) ''' 
    	read «d.input.prettyPrint»
    	%
    	«d.commands.prettyPrint(commandIndent)»
    	%
    	write «d.output.prettyPrint»
    '''
    
    def prettyPrint(Input i) {
    	return printList(i.vars,",")    
    }
    
    def prettyPrint(Output o){
    	return printList(o.vars,",")
    }
    
    def String prettyPrint(Commands cmds, int pIndent){
    	var res = "";
    	if(cmds.commands.size > 1){
    		for(i:0..cmds.commands.size-2){
    			res += cmds.commands.get(i).prettyPrint(pIndent)+" ;\n"
    		}
    	}
    	res += cmds.commands.get(cmds.commands.size-1).prettyPrint(pIndent)
    	return res
    }
    
    def prettyPrint(Command c, int pIndent) {
    	if( c.cmd instanceof NopImpl ) {
    		return (c.cmd as NopImpl).prettyPrint(pIndent)
       	} 
       	
       	if( c.cmd instanceof AffectImpl ) {
    		return (c.cmd as AffectImpl).prettyPrint()
       	}
       	
       	if( c.cmd instanceof IfImpl ) {
    		return (c.cmd as IfImpl).prettyPrint(pIndent)
       	}
    }
    
    def prettyPrint( NopImpl n , int pIndent) '''«makeIndent(pIndent)»«n.nop»'''
    	
    def String prettyPrint( Expr e){
    	if( e.exprSimple != null ) {
    		return (e.exprSimple as ExprSimpleImpl).prettyPrint()
       	} 
       	
       	if( e.exprAnd != null ) {
    		return (e.exprAnd as ExprAndImpl).prettyPrint()
       	}
       	
       	if( e.exprOr != null ) {
    		return (e.exprOr as ExprOrImpl).prettyPrint()
       	}
       	return "TEST null pour Expr"
    	}
    	
    	
    	def String prettyPrint( ExprSimpleImpl e){
    		if(e.nil == null){
    			return e.value
    		}
    		return "nil"
    	}
    	
    	def String prettyPrint( ExprAndImpl e){
    		return "("+ (e.arg1 as ExprSimpleImpl).prettyPrint() + " and " + e.arg2.prettyPrint() + ")"
    	}
    	
    	def String prettyPrint( ExprOrImpl e){
    		return "("+ (e.arg1 as ExprSimpleImpl).prettyPrint() + " or " + e.arg2.prettyPrint() + ")"
    	}
    	
    	
    
    def String prettyPrint( IfImpl i, int pIndent){
    	var parentIndent = makeIndent(pIndent)
    	var indent = pIndent + ifIndent
    	'''
    	«parentIndent»if «i.expr.prettyPrint()» then
    	«i.commands1.prettyPrint(indent)»
    	«IF i.commands2 != null»
    	«parentIndent»else
    	«i.commands2.prettyPrint(indent)»
    	«ENDIF»
    	«parentIndent»fi
    	'''
    	
    	}
    
    def String prettyPrint(AffectImpl a) {
    	var res = printList(a.vars,", ")
    	res += " := "
    	
    	var list = a.exprs
    	for(i:0..list.size-1){
    		println(list.get(i).class)
    	}
    	
    	res += printListExpr(a.exprs,", ")
    	
    	return res
    }
    
     def String printListExpr(EList<Expr> list, String delim){
	
     	var res = ""
     	if(list.size > 1){
     		for(i:0..list.size-2){
    			res+= list.get(i).prettyPrint()+delim
    		}
    	}
    	res += list.get(list.size-1).prettyPrint()
    	return res
    }
    
    def String printList(EList<String> list, String delim){
    	var res = ""
    	if(list.size > 1){
    		for(i:0..list.size-2){
    			res+= list.get(i)+delim
    		}
    	}
    	res += list.get(list.size-1)
    	
    	return res
    }
    
    def String makeIndent(int indent){
    	var res = ""
    	for(i:0..indent){
    		if(i<indent) res+=" ";
    	}
    	return res
    }
}
