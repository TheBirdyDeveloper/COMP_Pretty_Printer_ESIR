/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator

import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.comp.wh.Command
import org.xtext.comp.wh.Commands
import org.xtext.comp.wh.Definition
import org.xtext.comp.wh.Input
import org.xtext.comp.wh.Output
import org.xtext.comp.wh.Program
import org.xtext.comp.wh.Wh
import org.xtext.comp.wh.impl.AffectImpl
import org.xtext.comp.wh.impl.NopImpl
import org.xtext.comp.wh.impl.IfImpl
import org.xtext.comp.wh.impl.ExprAndImpl
import org.xtext.comp.wh.impl.ExprImpl
import org.xtext.comp.wh.Expr
import org.xtext.comp.wh.impl.ExprOrImpl
import org.xtext.comp.wh.impl.ExprSimpleImpl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (file : resource.allContents.toIterable.filter(Wh)) {
        	fsa.generateFile("f.whpp", file.prettyPrint)
    	}
	}
	
	def void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String outputName) {
		for (file : resource.allContents.toIterable.filter(Wh)) {
        	fsa.generateFile(outputName, file.prettyPrint)
    	}
	}
	
	def prettyPrint(Wh file)'''
	«FOR prog : file.elements»
	«prog.prettyPrint»
	
	«ENDFOR»
	'''
	
	
	def prettyPrint(Program p) '''
            function «p.name»:
            «p.definition.prettyPrint»
        '''
                 
    def prettyPrint(Definition d) ''' 
    	read «d.input.prettyPrint»
    	%
    	    «d.command.prettyPrint(0)»
    	%
    	write «d.output.prettyPrint»
    '''
    
    def prettyPrint(Input i) {
    	return printList(i.vars,",")    
    }
    
    def prettyPrint(Output o){
    	return printList(o.vars,",")
    }
    
    def String prettyPrint(Commands cmds, int a){
    	var res = "";
    	if(cmds.commands.size > 1){
    		for(i:0..cmds.commands.size-2){
    			res += cmds.commands.get(i).prettyPrint(a)+" ;\n"
    		}
    	}
    	res += cmds.commands.get(cmds.commands.size-1).prettyPrint(a)
    	return res
    }
    
    def prettyPrint(Command c, int a) {
    	if( c.cmd instanceof NopImpl ) {
    		return (c.cmd as NopImpl).prettyPrint
       	} 
       	
       	if( c.cmd instanceof AffectImpl ) {
    		return (c.cmd as AffectImpl).prettyPrint
       	}
       	
       	if( c.cmd instanceof IfImpl ) {
    		return (c.cmd as IfImpl).prettyPrint(a)
       	}
    }
    
    def prettyPrint( NopImpl n ) '''«n.nop»'''
    
    /*def String prettyPrint( IfImpl i){
    	var res = "if "
    	res += i.expr
    	res += "\n   then "
    	res += i.commands1.prettyPrint
    	res += "\n   else "
    	res += i.commands2.prettyPrint
    	res += "\nfi"
    	
    	return res
    }*/
    	
    def String prettyPrint( Expr e, int indent){
    	if( e.exprSimple != null ) {
    		return (e.exprSimple as ExprSimpleImpl).prettyPrint(indent)
       	} 
       	
       	if( e.exprAnd != null ) {
    		return (e.exprAnd as ExprAndImpl).prettyPrint(indent)
       	}
       	
       	if( e.exprOr != null ) {
    		return (e.exprOr as ExprOrImpl).prettyPrint(indent)
       	}
       	return "TEST null pour Expr"
    	}
    	
    	
    	def String prettyPrint( ExprSimpleImpl e, int indent){
    		if(e.nil == null){
    			return e.value
    		}
    		return "nil"
    	}
    	
    	def String prettyPrint( ExprAndImpl e, int indent){
    		return "("+ (e.arg1 as ExprSimpleImpl).prettyPrint(indent) + " and " + e.arg2.prettyPrint(indent) + ")"
    	}
    	
    	def String prettyPrint( ExprOrImpl e, int indent){
    		return "("+ (e.arg1 as ExprSimpleImpl).prettyPrint(indent) + " or " + e.arg2.prettyPrint(indent) + ")"
    	}
    	
    	
    
    def String prettyPrint( IfImpl i, int indent){
    	var res = ""
    	var currentif = 0
    	while (currentif < indent){
    		res += "   "
    		currentif+=1
    	}
    	res += "if "
    	
    	res += i.expr.prettyPrint(indent)
    	
    	res += " then\n"
    	res += i.commands1.prettyPrint(indent+1)
    	res+= "\n"
    	
    	var currentElse = 0
    	while (currentElse < indent){
    		res += "   "
    		currentElse+=1
    	}
    	res += "else\n"
    	
    	res += i.commands2.prettyPrint(indent+1)
    	res+= "\n"
    	
		var fi = 0
    	while (fi < indent){
    		res += "   "
    		fi+=1
    	}
    	res += "fi"
    	
    	return res
    }
    
    
    def String prettyPrint(AffectImpl a) {
    	var res = printList(a.vars,", ")
    	res += " := "
    	
    	var list = a.exprs
    	for(i:0..list.size-1){
    		println(list.get(i).class)
    	}
    	
    	res += printListExpr(a.exprs,", ")
    	
    	return res
    }
    
     def String printListExpr(EList<Expr> list, String delim){
	
     	var res = ""
     	if(list.size > 1){
     		for(i:0..list.size-2){
    			res+= list.get(i).prettyPrint(0)+delim
    		}
    	}
    	res += list.get(list.size-1).prettyPrint(0)
    	return res
    }
    
    def String printList(EList<String> list, String delim){
    	var res = ""
    	if(list.size > 1){
    		for(i:0..list.size-2){
    			res+= list.get(i)+delim
    		}
    	}
    	res += list.get(list.size-1)
    	
    	return res
    }
}
