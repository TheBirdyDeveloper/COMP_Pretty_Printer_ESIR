/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator;

import java.util.List;

import org.apache.commons.cli.*;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.comp.WhStandaloneSetup;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {

	public static void main(String[] args) {

		Injector injector = new WhStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		
		Options options = new Options();
		
		Option output = new Option("o","output",true,"output file");
		options.addOption(output);
		Option input = new Option("i","input",true,"input file");
		input.setRequired(true);
		options.addOption(input);
		
		CommandLineParser parser = new GnuParser();
		HelpFormatter formatter = new HelpFormatter();
		CommandLine cmd;
		
		 try {
            cmd = parser.parse(options, args);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            formatter.printHelp("whpp", options);

            System.exit(1);
            return;
        }
		 
		 
		String inputFile = cmd.getOptionValue("input");
		
		String outputFile = cmd.getOptionValue("output");
		if(outputFile == null ){
			outputFile = "f.whpp";
		}
		
		main.runGenerator(inputFile,outputFile);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String inputName, String outputName) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(inputName), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		// Configure and start the generator
		System.out.println(outputName);
		fileAccess.setOutputPath("src-gen/");

		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		
		WhGenerator wh = new WhGenerator();
		wh.doGenerate(resource, fileAccess, context, outputName);

		System.out.println("Code generation finished.");
	}
}
